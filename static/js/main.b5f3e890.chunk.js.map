{"version":3,"sources":["ConnectForm.tsx","NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ConnectForm","props","state","value","ip","connecting","success","error","handleChange","bind","handleSubmit","event","this","setState","target","trim","preventDefault","checkConnection","response","onIPChange","info","console","className","onSubmit","type","disabled","onChange","max","Infos","data","React","Component","model","name","version","uri","a","fetch","catch","reason","Response","status","ok","text","xml","document","DOMParser","parseFromString","getElementsByTagName","innerHTML","NavBar","isExpanded","toggleMenu","active","role","aria-label","aria-expanded","onClick","aria-hidden","App","connected","log","localStorage","setItem","getItem","undefined","Input","index","pgm","prev","Controller","inputs","ws","WebSocket","connectWebsocket","onclose","onopen","debug","onmessage","msg","getTally","group","columns","column","getAttribute","startsWith","push","groupEnd","sendShortcut","action","then","close","Row","label","onAction","actionName","isButtonActive","input","ControllButtons","style","marginTop","ControlButton","buttons","map","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b5f3e890.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface State {\n    value: string,\n    connecting: boolean,\n    success: boolean,\n    error: boolean,\n    info?: Infos\n}\n\ntype Props = {\n    ip?: string,\n    onIPChange(ip: string): void\n}\n\nexport class ConnectForm extends React.Component<Props, State> {\n    constructor(props: Readonly<Props>) {\n        super(props);\n        this.state = {value: props.ip ?? '127.0.0.1', connecting: false, success: false, error: false}\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n        this.setState({value: event.target.value.trim()});\n    }\n\n    async handleSubmit(event: React.FormEvent) {\n        // alert('A name was submitted: ' + this.state.value);\n        event.preventDefault();\n        this.setState({connecting: true, success: false, error: false});\n        const response = await checkConnection(this.state.value)\n        this.setState({connecting: false});\n        if (response !== null) {\n            this.props.onIPChange(this.state.value)\n            this.setState({success: true, info: response});\n        } else {\n            console.error(\"No connection\")\n            this.setState({error: true});\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className=\"card\">\n                    <div className=\"card-header\">\n                        <div className=\"card-header-title\">\n                            Einstellungen\n                        </div>\n                    </div>\n                    <div className=\"card-content\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"field is-horizontal\">\n                                <div className=\"field-label is-normal\">\n                                    <label className=\"label\">IP/Hostname:</label>\n                                </div>\n                                <div className=\"field-body\">\n                                    <div className=\"field\">\n                                        <div className=\"field has-addons\">\n                                            <p className=\"control is-expanded\">\n                                                <input className=\"input\" type=\"text\" value={this.state.value}\n                                                       disabled={this.state.connecting}\n                                                       onChange={this.handleChange}/>\n                                            </p>\n                                            <p className=\"control\">\n                                                <button className=\"button is-link\" type=\"submit\"\n                                                        disabled={this.state.connecting}>Verbinden\n                                                </button>\n                                            </p>\n                                        </div>\n                                        {this.state.success &&\n                                        <p className=\"help is-success\">Verbindung hergestellt</p>}\n                                        {this.state.error &&\n                                        <p className=\"help is-danger\">Verbindung konnte nicht hergestellt werden</p>}\n                                    </div>\n\n                                </div>\n                            </div>\n                            {\n                                this.state.connecting ?\n                                    <div className=\"field\">\n                                        <progress className=\"progress is-small\" max=\"100\">15%</progress>\n                                    </div> : null\n                            }\n                            <div className=\"field is-horizontal\">\n                                <div className=\"field-label\"/>\n                                <div className=\"field-body\">\n                                    <div className=\"field\">\n                                        {this.state.success &&\n                                        <Infos data={this.state.info}/>}\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction Infos(props: { data?: Infos }) {\n    return (\n        <div className=\"columns is-mobile\">\n            <div className=\"column is-one-quarter \">\n                <p>Model:</p>\n                <p>Name:</p>\n                <p>Version:</p>\n            </div>\n            <div className=\"column\">\n                <p>{props.data?.model}</p>\n                <p>{props.data?.name}</p>\n                <p>{props.data?.version}</p>\n            </div>\n        </div>\n    );\n}\n\nexport async function checkConnection(uri: string): Promise<Infos | null> {\n    const response = await fetch(`http://${uri}:5952/v1/version`)\n        .catch(reason => {\n            console.error(reason);\n            return new Response(null, {status: 404})\n        });\n    if (response.ok) {\n        const xml = await response.text();\n        const document = new DOMParser().parseFromString(xml, \"text/xml\");\n        const name = document.getElementsByTagName(\"product_name\")[0].innerHTML\n        const model = document.getElementsByTagName(\"product_model\")[0].innerHTML\n        const version = document.getElementsByTagName(\"product_version\")[0].innerHTML\n        return {model: model, name: name, version: version}\n    } else {\n        return null\n    }\n}\n\ntype Infos = {\n    name: string,\n    model: string\n    version: string\n}\n","import React from \"react\";\n\ntype State = {\n    isExpanded: boolean\n}\n\nexport class NavBar extends React.Component<{},State> {\n    state: State = {isExpanded: false}\n\n    toggleMenu = (event: React.MouseEvent) => {\n        this.setState({\n            isExpanded: !this.state.isExpanded\n        });\n        event.preventDefault();\n    }\n\n    render() {\n        let active: string;\n        if (this.state.isExpanded) {\n            active = ' is-active';\n        } else {\n            active = ''\n        }\n        return (\n            <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n                <div className=\"navbar-brand\">\n                    <div className=\"navbar-item\">Tricaster Remote</div>\n                    <div role=\"button\" className={'navbar-burger' + active} aria-label=\"menu\" aria-expanded=\"false\"\n                         onClick={this.toggleMenu}>\n                        <span aria-hidden=\"true\"/>\n                        <span aria-hidden=\"true\"/>\n                        <span aria-hidden=\"true\"/>\n                    </div>\n                </div>\n            </nav>\n        );\n    }\n}\n","import React, {MouseEventHandler} from 'react';\nimport './App.scss'\nimport {ConnectForm} from \"./ConnectForm\";\nimport {NavBar} from \"./NavBar\";\n\ntype AppState = {\n    connected: boolean,\n    uri?: string\n}\n\nclass App extends React.Component<{}, AppState> {\n    state: AppState = {connected: false}\n\n    render() {\n        return (\n            <>\n                <NavBar/>\n                <div className={'modal' + (!this.state.connected ? ' is-active' : '')}>\n                    <div className=\"modal-background\"/>\n                    <div className=\"modal-content\">\n                        <ConnectForm onIPChange={ip => {\n                            console.log(ip);\n                            this.setState({connected: true, uri: ip})\n                            localStorage.setItem('ip', ip)\n\n                        }} ip={localStorage.getItem('ip') ?? undefined}/>\n                    </div>\n                </div>\n                {this.state.uri &&\n                <section className=\"section\">\n                    <Controller uri={this.state.uri}/>\n                </section>\n                }\n            </>\n        );\n    }\n}\n\nexport default App;\n\n\nclass Input {\n    constructor(public name: string, public index: number, public pgm: boolean = false, public prev: boolean = false) {\n    }\n}\n\nclass Controller extends React.Component<{ uri: string }, { inputs: Input[] }> {\n    state = {inputs: []}\n    ws: WebSocket = new WebSocket(`ws://${this.props.uri}:5951/v1/change_notifications`)\n\n\n\n    componentDidMount() {\n        //connect websocket\n        this.connectWebsocket();\n        // get tally\n        this.getTally();\n    }\n\n    componentWillUnmount() {\n        this.ws.close();\n    }\n\n    connectWebsocket = () => {\n        // let url = `ws://${this.props.uri}:5951/v1/change_notifications`;\n        // let ws = new WebSocket(url);\n        this.ws.onclose = this.connectWebsocket\n        this.ws.onopen = () => {\n            console.debug(\"TriCaster WebSocket Opened\")\n        }\n        this.ws.onmessage = (msg)=> {\n            if (msg.data === \"tally\") {\n                // do tally things\n                this.getTally();\n            } else if (msg.data === \"switcher\") {\n                //do switcher things\n            } else if (msg.data === \"buffer\") {\n                // do buffer things\n            }\n        }\n\n    }\n\n    getTally = async () => {\n        let response = await fetch(`http://${this.props.uri}:5952/v1/dictionary?key=tally`)\n        let xml = await response.text()\n        console.group('Parse Tally')\n        console.debug('raw: %o', xml)\n        let document = new DOMParser().parseFromString(xml, \"text/xml\");\n        console.debug('parsed: %o', document)\n        let columns = document.getElementsByTagName('column');\n        let inputs = []\n        for (const column of columns) {\n            if (column.getAttribute('name')?.startsWith('input')) {\n                inputs.push(new Input(column.getAttribute('name') ?? '', +(column.getAttribute('index') ?? ''),\n                    column.getAttribute('on_pgm') === \"true\", column.getAttribute('on_prev') === \"true\"));\n            }\n        }\n        console.debug(\"inputs: %o\", inputs)\n        this.setState({inputs: inputs});\n        console.groupEnd()\n    }\n\n    sendShortcut = (action: string) => {\n        fetch(`http://${this.props.uri}:5952/v1/shortcut?${action}`).then(value => console.debug(value))\n    }\n\n    render() {\n        return (\n            <>\n                <Row label={'Pgm'} className=\"pgm\" onAction={this.sendShortcut} actionName=\"main_a_row\"\n                     inputs={this.state.inputs} isButtonActive={input => input.pgm}/>\n                <Row label={'Prev'} className=\"prev\" onAction={this.sendShortcut} actionName=\"main_b_row\"\n                     inputs={this.state.inputs} isButtonActive={input => input.prev}/>\n                <ControllButtons onAction={this.sendShortcut}/>\n            </>\n        );\n    }\n}\n\nclass ControllButtons extends React.Component<{ onAction(action: string): void }, {}> {\n    render() {\n        return (\n            <div style={{marginTop: '1em'}}>\n                <ControlButton label=\"AUTO\" onClick={() => this.props.onAction('name=main_auto')}/>\n                <ControlButton label=\"TAKE\" onClick={() => this.props.onAction('name=main_take')}/>\n            </div>\n        );\n    }\n}\n\nfunction ControlButton(props: { active?: boolean, label: string, onClick?: MouseEventHandler }) {\n    let className = \"button\" + (props.active ? ' is-active' : '');\n    return (\n        <>\n            <button className={className} onClick={props.onClick}>{props.label}</button>\n        </>\n    )\n}\n\nfunction Row(props: { label: string, className?: string, actionName: string, onAction(action: string): void, inputs: Input[], isButtonActive: (input: Input) => boolean }) {\n    let buttons = props.inputs.map(value =>\n        <ControlButton label={value.index + 1 + ''} active={props.isButtonActive(value)} key={value.name}\n                       onClick={() => props.onAction(`name=${props.actionName}&value=${value.index}`)}/>\n    )\n    return (\n        <>\n            <div className={props.className}>\n                <div>{props.label}</div>\n                {\n                    buttons\n                }\n            </div>\n        </>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}